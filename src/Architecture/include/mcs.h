#ifndef __MCS_H
#define __MCS_H

#include <stdbool.h>
#include <sdb.h>

typedef unsigned int MCS_error_code;

enum MCSType {
    MCS_TYPE_MESSAGE    = 0,
    MCS_TYPE_STATE      = 1,
    MCS_TYPE_PAYLOAD    = 2,
    MCS_TYPE_OK         = 253,
    MCS_TYPE_OK_DATA    = 254,
    MCS_TYPE_ERR        = 255,
};

/* Datatype for the packets that can be sent to and from the SDB */
typedef struct MCSPacket {
    enum MCSType type;
    unsigned short cmd;
    unsigned short nargs;
    unsigned char *args;
    unsigned short data_size;
    unsigned char *data;
} MCSPacket;

/* Datatypes for the autogenerated lists of commands */
typedef struct MCSCommandOptionsCommon {
    const char *name;
    unsigned short nargs;
    bool raw_data;
    unsigned int response_size;
} MCSCommandOptionsCommon;

struct MCSCommandOptionsMessage {
    struct MCSCommandOptionsCommon cmd;
    const char *destination;
    SDBGroup origin_groups[SDB_GROUP_MAX];
    SDBGroup destination_groups[SDB_GROUP_MAX];
};

struct MCSCommandOptionsStatePerms {
    SDBGroup group;
    time_t max_expire;
};

struct MCSCommandOptionsState {
    struct MCSCommandOptionsCommon cmd;
    void *(*request)(MCSPacket *);
    unsigned int dimensions;
    struct MCSCommandOptionsStatePerms expire_group[SDB_GROUP_MAX];
};

struct MCSCommandOptionsPayload {
    struct MCSCommandOptionsCommon cmd;
    unsigned int priority;
    const char *command;
    const char *parameters;
    const char *arguments;
    const char *data;
};

// DEBUG!
static inline void *auto_get_temperature_arduino(MCSPacket *pkt) {
    return NULL;
}

/* The autogenerated lists of commands */
#include "auto_mcs.h"

const static int mcs_command_list_size[] =
{
    mcs_command_message_list_size,
    mcs_command_state_list_size,
    mcs_command_payload_list_size,
};

#define mcs_command_types 3

void mcs_free(MCSPacket *pkt);

MCSPacket *mcs_read_command(int fd);
int mcs_write_command(int fd, MCSPacket *pkt);
int mcs_write_command_and_free(int fd, MCSPacket *pkt);

MCSPacket *mcs_ok_packet_data(void *data, size_t size);
MCSPacket *mcs_ok_packet(void);
MCSPacket *mcs_err_packet(MCS_error_code err_code);
MCSPacket *mcs_create_packet(MCSCommand cmd, unsigned short nargs,
        unsigned char *args, unsigned short data_size, unsigned char *data);

MCS_error_code mcs_err_code_from_command(MCSPacket *pkt);
const char *mcs_command_to_string(MCSPacket *pkt);

#endif
